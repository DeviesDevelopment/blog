<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on Devies Tech Culture Business Blog</title><link>https://blog.devies.se/tags/java/</link><description>Recent content in Java on Devies Tech Culture Business Blog</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 08 Apr 2021 09:25:58 +0000</lastBuildDate><atom:link href="https://blog.devies.se/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Minimize Java Lambda Cold Start Times</title><link>https://blog.devies.se/posts/implementation/aws/2021/04/08/minimize-java-lambda-coldstarts.html/</link><pubDate>Thu, 08 Apr 2021 09:25:58 +0000</pubDate><guid>https://blog.devies.se/posts/implementation/aws/2021/04/08/minimize-java-lambda-coldstarts.html/</guid><description>&lt;p>If you have ever run Java inside a lambda function on AWS, you will have noticed the quite significant cold start times that comes with spinning up the JVM environment. In this post, I will discuss some different tricks you can use to minimize these cold start times.&lt;/p>
&lt;p>The problem with cold starts arises when there are no &amp;ldquo;warm&amp;rdquo; lambda available to handle an incoming request, which usually happens whenever an endpoint experiences a large and sudden spike in traffic. The most commonly occurring scenario when this happens is probably when an endpoint goes from no traffic at all in a while (and thus having no warm lambdas ready) to suddenly having one or more incoming requests to serve.&lt;/p></description></item></channel></rss>