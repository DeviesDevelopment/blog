<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gradle on Devies Tech Culture Business Blog</title><link>https://blog.devies.se/tags/gradle/</link><description>Recent content in Gradle on Devies Tech Culture Business Blog</description><generator>Hugo</generator><language>en</language><lastBuildDate>Fri, 30 Dec 2022 14:05:16 +0100</lastBuildDate><atom:link href="https://blog.devies.se/tags/gradle/index.xml" rel="self" type="application/rss+xml"/><item><title>Upgrading Libraries in Your Android Project: A Quick and Easy Guide</title><link>https://blog.devies.se/posts/upgrading-libraries-in-your-android-project-a-quick-and-easy-guide/</link><pubDate>Fri, 30 Dec 2022 14:05:16 +0100</pubDate><guid>https://blog.devies.se/posts/upgrading-libraries-in-your-android-project-a-quick-and-easy-guide/</guid><description>&lt;h2 id="hey-fellow-developers">Hey fellow developers!&lt;/h2>
&lt;p>Upgrading libraries in your gradle file for an Android project is a crucial part of keeping your project up to date and running smoothly.
However, it&amp;rsquo;s not uncommon to encounter errors or deprecated code after upgrading a library. If this happens to you, don&amp;rsquo;t panic!
There are a few steps you can take to fix the issues and get your project back on track.&lt;/p>
&lt;h2 id="understanding-the-role-of-gradle-files">Understanding the Role of Gradle Files&lt;/h2>
&lt;p>In an Android project, there are two main gradle build files that you might need to work with: the &lt;strong>&amp;ldquo;build.gradle&amp;rdquo;&lt;/strong> file and the &lt;strong>&amp;ldquo;gradle-wrapper.properties&amp;rdquo;&lt;/strong> file.&lt;/p></description></item></channel></rss>