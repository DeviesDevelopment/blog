<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Development on Devies Tech Culture Business Blog</title><link>https://deviesdevelopment.github.io/blog/tags/development/</link><description>Recent content in Development on Devies Tech Culture Business Blog</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 01 Jun 2023 07:31:20 +0200</lastBuildDate><atom:link href="https://deviesdevelopment.github.io/blog/tags/development/index.xml" rel="self" type="application/rss+xml"/><item><title>A Structured Approach to Work With Software Development Tasks</title><link>https://deviesdevelopment.github.io/blog/posts/a-structured-approach-to-work-with-software-development-tasks/</link><pubDate>Thu, 01 Jun 2023 07:31:20 +0200</pubDate><guid>https://deviesdevelopment.github.io/blog/posts/a-structured-approach-to-work-with-software-development-tasks/</guid><description>Sometimes I see people (myself included) working on software development tasks in a non-structured way. You might have a vague understanding of what you&amp;rsquo;re about to accomplish. Aimlessly traversing the code base, hoping to find places that you might need to change. You instantly start to chase new ideas, while forgetting about prior (and possibly important) ideas. It might be hard to determine when you&amp;rsquo;re done. You might not commit intermediary working states, and have a hard time finding what you&amp;rsquo;ve messed up once something is broken.</description></item></channel></rss>