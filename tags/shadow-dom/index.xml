<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Shadow DOM on Devies Tech Culture Business Blog</title><link>https://blog.devies.se/tags/shadow-dom/</link><description>Recent content in Shadow DOM on Devies Tech Culture Business Blog</description><generator>Hugo</generator><language>en</language><lastBuildDate>Tue, 24 Sep 2024 09:08:49 +0200</lastBuildDate><atom:link href="https://blog.devies.se/tags/shadow-dom/index.xml" rel="self" type="application/rss+xml"/><item><title>How We Chose to Implement Our Design System With Web Components</title><link>https://blog.devies.se/posts/how-we-chose-to-implement-our-design-system-with-web-components/</link><pubDate>Tue, 24 Sep 2024 09:08:49 +0200</pubDate><guid>https://blog.devies.se/posts/how-we-chose-to-implement-our-design-system-with-web-components/</guid><description>&lt;p>In case you missed my first post &lt;a href="https://blog.devies.se/posts/implementing-a-design-system-choosing-a-way-forward">&amp;ldquo;Implementing a design system&amp;rdquo;&lt;/a>, we chose to implement our design system with web components. This post will be about our thought process and the tradeoffs we considered when deciding on how we would implement with web components.&lt;/p>
&lt;p>It is possible to write a web component using only native JavaScript and HTML, but it is challenging. It is much more common to use a library like Lit or Stencil. The library helps with registration of the web component and change management as well as interoperability with popular frameworks.
In our case, in addition to Lit and Stencil, we also considered Mitosis, and compiling to web components with Solid or Angular.&lt;/p></description></item></channel></rss>