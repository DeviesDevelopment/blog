<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Test on Devies Tech Culture Business Blog</title><link>https://deviesdevelopment.github.io/blog/tags/test/</link><description>Recent content in Test on Devies Tech Culture Business Blog</description><generator>Hugo</generator><language>en</language><lastBuildDate>Tue, 02 Aug 2022 09:07:50 +0200</lastBuildDate><atom:link href="https://deviesdevelopment.github.io/blog/tags/test/index.xml" rel="self" type="application/rss+xml"/><item><title>Integration Test Api in .Net Using Reflection</title><link>https://deviesdevelopment.github.io/blog/posts/integration-test-api-controller-in-.net-using-reflection/</link><pubDate>Tue, 02 Aug 2022 09:07:50 +0200</pubDate><guid>https://deviesdevelopment.github.io/blog/posts/integration-test-api-controller-in-.net-using-reflection/</guid><description>There are a few different approaches to testing in the spectrum between simple unit tests and complete E2E tests. If I had to choose one approach to prioritize I would pick integration tests.
The key reasons are:
Tests a flow of multiple functions, in contrast with unit tests where only a single function is tested Self contained i.e. the test has no external dependencies on a deployed environment etc. Makes logical sense to test a complete function in a REST api, a single Lambda in AWS or an Azure function The problem In my case the goal was to setup a test suite for a .</description></item></channel></rss>