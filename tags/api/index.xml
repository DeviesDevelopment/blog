<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Api on Devies Tech Culture Business Blog</title><link>https://blog.devies.se/tags/api/</link><description>Recent content in Api on Devies Tech Culture Business Blog</description><generator>Hugo</generator><language>en</language><lastBuildDate>Tue, 02 Aug 2022 09:07:50 +0200</lastBuildDate><atom:link href="https://blog.devies.se/tags/api/index.xml" rel="self" type="application/rss+xml"/><item><title>Integration Test Api in .Net Using Reflection</title><link>https://blog.devies.se/posts/integration-test-api-controller-in-.net-using-reflection/</link><pubDate>Tue, 02 Aug 2022 09:07:50 +0200</pubDate><guid>https://blog.devies.se/posts/integration-test-api-controller-in-.net-using-reflection/</guid><description>&lt;p>There are a few different approaches to testing in the spectrum between simple unit tests and complete E2E tests. If I had to choose one approach to prioritize I would pick integration tests.&lt;/p>
&lt;p>The key reasons are:&lt;/p>
&lt;ul>
&lt;li>Tests a flow of multiple functions, in contrast with unit tests where only a single function is tested&lt;/li>
&lt;li>Self contained i.e. the test has no external dependencies on a deployed environment etc.&lt;/li>
&lt;li>Makes logical sense to test a complete function in a REST api, a single Lambda in AWS or an Azure function&lt;/li>
&lt;/ul>
&lt;h2 id="the-problem">The problem&lt;/h2>
&lt;p>In my case the goal was to setup a test suite for a .NET web api. I quickly realized that the naive way to explicitly instantiate every controller plus all dependencies would lead
to lots of repeated boilerplate code in order to setup a test case. I also wanted to make use of the existing &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-6.0">DI&lt;/a> configuration.&lt;br>
So how to create a generic setup where new test cases is a breeze to create? ðŸ¤”&lt;/p></description></item></channel></rss>