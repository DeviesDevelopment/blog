<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Android Studio on Devies Tech Culture Business Blog</title><link>https://deviesdevelopment.github.io/blog/tags/android-studio/</link><description>Recent content in Android Studio on Devies Tech Culture Business Blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Fri, 30 Dec 2022 14:05:16 +0100</lastBuildDate><atom:link href="https://deviesdevelopment.github.io/blog/tags/android-studio/index.xml" rel="self" type="application/rss+xml"/><item><title>Upgrading Libraries in Your Android Project: A Quick and Easy Guide</title><link>https://deviesdevelopment.github.io/blog/posts/upgrading-libraries-in-your-android-project-a-quick-and-easy-guide/</link><pubDate>Fri, 30 Dec 2022 14:05:16 +0100</pubDate><guid>https://deviesdevelopment.github.io/blog/posts/upgrading-libraries-in-your-android-project-a-quick-and-easy-guide/</guid><description>Hey fellow developers! Upgrading libraries in your gradle file for an Android project is a crucial part of keeping your project up to date and running smoothly. However, it&amp;rsquo;s not uncommon to encounter errors or deprecated code after upgrading a library. If this happens to you, don&amp;rsquo;t panic! There are a few steps you can take to fix the issues and get your project back on track.
Understanding the Role of Gradle Files In an Android project, there are two main gradle build files that you might need to work with: the &amp;ldquo;build.</description></item></channel></rss>