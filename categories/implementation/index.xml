<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Implementation on Devies Tech Culture Business Blog</title><link>https://blog.devies.se/categories/implementation/</link><description>Recent content in Implementation on Devies Tech Culture Business Blog</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 08 Apr 2021 09:25:58 +0000</lastBuildDate><atom:link href="https://blog.devies.se/categories/implementation/index.xml" rel="self" type="application/rss+xml"/><item><title>Minimize Java Lambda Cold Start Times</title><link>https://blog.devies.se/posts/implementation/aws/2021/04/08/minimize-java-lambda-coldstarts.html/</link><pubDate>Thu, 08 Apr 2021 09:25:58 +0000</pubDate><guid>https://blog.devies.se/posts/implementation/aws/2021/04/08/minimize-java-lambda-coldstarts.html/</guid><description>&lt;p>If you have ever run Java inside a lambda function on AWS, you will have noticed the quite significant cold start times that comes with spinning up the JVM environment. In this post, I will discuss some different tricks you can use to minimize these cold start times.&lt;/p>
&lt;p>The problem with cold starts arises when there are no &amp;ldquo;warm&amp;rdquo; lambda available to handle an incoming request, which usually happens whenever an endpoint experiences a large and sudden spike in traffic. The most commonly occurring scenario when this happens is probably when an endpoint goes from no traffic at all in a while (and thus having no warm lambdas ready) to suddenly having one or more incoming requests to serve.&lt;/p></description></item><item><title>Migrating data between DynamoDB tables</title><link>https://blog.devies.se/posts/2021-03-30-dynamodb-migrations/</link><pubDate>Tue, 30 Mar 2021 10:34:41 +0000</pubDate><guid>https://blog.devies.se/posts/2021-03-30-dynamodb-migrations/</guid><description>&lt;p>When setting up a new DynamoDB table, an important decision is to decide what primary key to use. However, it’s not uncommon to not have the full picture up front and therefore it could be hard to make the right decision beforehand. While the &lt;a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/bp-general-nosql-design.html">official AWS documentation&lt;/a> states that &lt;em>“you shouldn’t start designing your schema for DynamoDB until you know the questions it will need to answer”&lt;/em>, you often need to experiment to be able to discover what those questions are. Luckily there is an easy approach for how to migrate to a new key schema that we will describe in this blog post.&lt;/p></description></item><item><title>Analytics without third-party tools</title><link>https://blog.devies.se/posts/2020-09-01-analytics-poc/</link><pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate><guid>https://blog.devies.se/posts/2020-09-01-analytics-poc/</guid><description>&lt;p>Finding out how much traffic your site has and how your users interact with it is always crucial. Such information will enable you to scale your backend properly, fine-tune the user experience and weed out unused features. Some even go so far as claiming that data is the &amp;ldquo;gold of our time&amp;rdquo;. Regardless of the truth of that claim, few can dispute the usefulness of user analytics data.&lt;/p>
&lt;p>The go-to solution for most developers is to use Google Analytics (in fact used by &lt;a href="https://w3techs.com/technologies/details/ta-googleanalytics">55% of all websites&lt;/a>) or some other third party framework. Although this can surely be a valid choice and a quick way forward, using a third party tool to handle user analytics data raises some concerns. First of all, you give away data about how your product is being used for free (or perhaps you even pay for it!). And more importantly, it makes it harder for you to guarantee that potentially sensitive user data is handled in an anonymous and secure way. The best way to guarantee that your data is in safe hands is to let as few hands as possible get in touch with the data.&lt;/p></description></item></channel></rss>